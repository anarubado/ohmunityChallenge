{"version":3,"sources":["exercises/Exercise01.jsx","exercises/Exercise02.jsx","exercises/Exercise03.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Exercise01","useState","users","setUsers","useEffect","fetch","then","r","json","data","limit","length","i","className","map","user","key","id","name","email","Counter","value","onChange","onClick","decrement","increment","GroupOfCounters","React","setData","total","setTotal","amountToIncrement","counter","incrementTotal","amountToDecrement","decrementTotal","Total","Exercise02","Exercise03","Welcome","NavLink","props","getProps","isCurrent","App","to","path","default","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a9768c1c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TOTAL_USERS = 5;\r\n\r\nconst Exercise01 = () => {\r\n  const [users, setUsers] = useState([]); // useState is a hook that returns the current state value and a function that lets you update it.\r\n  // The objective here is to change the initial state of users to another one where it has the users' data from the API.\r\n\r\n  /* THE FIX STARTS HERE */\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(r => r.json())\r\n      .then(data => {\r\n        let limit = data.length;\r\n        let users = [];\r\n\r\n        if(data.length > TOTAL_USERS){\r\n          limit = TOTAL_USERS;\r\n        }\r\n        \r\n        for (let i = 0; i < limit; i++) {\r\n          users = [...users, data[i]];         \r\n        }\r\n        return users;        \r\n      })\r\n      .then(users =>\r\n        setUsers(users) // setUsers replaces the empty array with the data in the state variable, users.\r\n      ); \r\n    }, []); // With useEffect we can mount the component with the pertinent data.\r\n\r\n\r\n  /* THE FIX ENDS HERE */\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Instructions</h2>\r\n\r\n      <p>We are currently trying to render the first 5 users we obtain from a REST API. The problem is that, for some reason, it's only rendering one of them. Another thing we've noticed is that, sometimes, it renders different user.</p>\r\n\r\n      <p>\r\n        <strong>TODO:</strong>\r\n        <ul>\r\n          <li>Fetch and Render the first 5 users</li>\r\n          <li>Make sure the order is ascendant by ID</li>\r\n        </ul>\r\n      </p>\r\n\r\n      <hr className=\"my-5\" />\r\n\r\n      <h3>Users</h3>\r\n\r\n      <ul className=\"list-group\">\r\n        {users.map(user => <li key={`user-${user.id}`} className=\"list-group-item\">\r\n          <strong>ID:</strong> {user.id} - <strong>Name:</strong> {user.name} <strong>Email:</strong> {user.email}\r\n        </li>)}\r\n      </ul>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exercise01;\r\n","import React from 'react';\r\n\r\n/* THE FIX STARTS HERE */\r\n\r\n// Counter Component\r\n// const Counter = ({ value, onIncrement, onDecrement, id}) => {\r\n\r\n//   return (\r\n//     <div className=\"d-flex my-2\">\r\n//       <strong>{value}</strong>\r\n//       <div className=\"ml-2\">\r\n//         <button className=\"btn btn-danger mr-1\" onClick={() => {onDecrement(id, 1);}}>-</button>\r\n\r\n//         <button className=\"btn btn-success\" onClick={() => {onIncrement(id, 1);}}>+</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// Counter Component copy\r\nconst Counter = ({ value, onChange, id}) => {\r\n    return (\r\n      <div className=\"d-flex my-2\">\r\n        <strong>{value}</strong>\r\n        <div className=\"ml-2\">\r\n          <button className=\"btn btn-danger mr-1\" onClick={() => {onChange().decrement(id, 1);}}>-</button>\r\n  \r\n          <button className=\"btn btn-success\" onClick={() => {onChange().increment(id, 1);}}>+</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n// GroupOfCounters Component\r\nconst GroupOfCounters = () => {\r\n\r\n  const [data, setData] = React.useState([\r\n    { id: 1, value: 0 },\r\n    { id: 2, value: 0 },\r\n    { id: 3, value: 0 },\r\n    { id: 4, value: 0 }\r\n  ]);\r\n\r\n  const [total, setTotal] = React.useState(0);\r\n\r\n  const incrementTotal = (amountToIncrement) => {\r\n    setTotal(total + amountToIncrement);\r\n  };\r\n\r\n  const decrementTotal = (amountToDecrement) => {\r\n    setTotal(total - amountToDecrement);\r\n  }; \r\n\r\n  // const onIncrement = (id, amountToIncrement) => {\r\n  //   setData(\r\n  //     data.map((counter) => \r\n  //       counter.id === id ? {...counter, value: counter.value + amountToIncrement} : counter\r\n  //     )\r\n  //   )\r\n  //   incrementTotal(amountToIncrement);\r\n  // }\r\n\r\n  // const onDecrement = (id, amountToDecrement) => {\r\n  //   setData(\r\n  //     data.map((counter) => \r\n  //       counter.id === id ? {...counter, value: counter.value - amountToDecrement} : counter\r\n  //     )\r\n  //   )\r\n  //   decrementTotal(amountToDecrement);\r\n  // } \r\n  \r\n  const onChange = () => {\r\n    return {\r\n      increment: function(id, amountToIncrement){\r\n        setData(\r\n          data.map((counter) => \r\n            counter.id === id ? {...counter, value: counter.value + amountToIncrement} : counter\r\n          )\r\n        )\r\n        incrementTotal(amountToIncrement);\r\n        \r\n      },\r\n\r\n      decrement: function(id, amountToDecrement){\r\n        setData(\r\n          data.map((counter) => \r\n            counter.id === id ? {...counter, value: counter.value - amountToDecrement} : counter\r\n          )\r\n        )\r\n        decrementTotal(amountToDecrement);   \r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {data.map((counter) => (\r\n        <div key={counter.id}>\r\n          <Counter value={counter.value} \r\n          // onIncrement = {onIncrement}\r\n          // onDecrement = {onDecrement}\r\n          onChange = {onChange}\r\n          id = {counter.id}/>\r\n        </div>\r\n      ))}\r\n      <Total total={total} />\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\n// Total Component\r\nconst Total = ({total}) => {\r\n  return (\r\n    <strong>Total: {total}</strong>\r\n  )\r\n}\r\n\r\n/* THE FIX ENDS HERE */\r\n\r\nconst Exercise02 = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Instructions</h2>\r\n\r\n      <p>\r\n        There are 2 components in this file: <strong>Counter</strong> and{' '}\r\n        <strong>GroupOfCounters</strong>. The steps below will take you through\r\n        modifying and adding components to change functionality and\r\n        implementation.\r\n      </p>\r\n\r\n      <ol>\r\n        <li>\r\n          Update the <strong>Counter</strong> component to take{' '}\r\n          <strong>onIncrement</strong> and <strong>onDecrement</strong>{' '}\r\n          callbacks as props and ensure they update the counter's values\r\n          independently. Each callback should take a single, integer value as a\r\n          parameter which is the amount to increment the counter's existing\r\n          value by.\r\n        </li>\r\n\r\n        <li>\r\n          Move the global <strong>data</strong> array to the component state for\r\n          the <strong>GroupOfCounters</strong> component.\r\n        </li>\r\n\r\n        <li>\r\n          Render a fourth <strong>Counter</strong> component and ensure it's\r\n          value is updated independently from the others.\r\n        </li>\r\n\r\n        <li>\r\n          Create a <strong>Total</strong> component, which should display below\r\n          the <strong>Counter</strong> components and always display the running\r\n          total of all the <strong>Counter</strong> values.\r\n        </li>\r\n\r\n        <li>\r\n          Make a copy of the <strong>Counter</strong> component, saving the\r\n          original so you're instructor can view it later. Then do the\r\n          following:\r\n          <ol>\r\n            <li>\r\n              Remove the <strong>onIncrement</strong> and{' '}\r\n              <strong>onDecrement</strong> props from the (new){' '}\r\n              <strong>Counter</strong> component\r\n            </li>\r\n            <li>\r\n              Add a single <strong>onChange</strong> callback prop that takes a\r\n              single integer parameter — the new value for the counter.\r\n            </li>\r\n            <li>\r\n              Ensure all <strong>Counter</strong> components still update and\r\n              function independently after this change.\r\n            </li>\r\n          </ol>\r\n        </li>\r\n      </ol>\r\n\r\n      <hr className=\"my-5\" />\r\n      <GroupOfCounters />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exercise02;\r\n","import React from 'react';\r\n\r\nconst Exercise03 = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Instructions</h2>\r\n\r\n      <p>Finally, we would like to make a quick simple fixes in the webapp.</p>\r\n\r\n      <ol>\r\n        <li>\r\n          The <strong>Homepage</strong> is always \"active\" in the navbar, even\r\n          when we go to any of the other pages. We need to activate the correct\r\n          page depending on which page we are located. HINT: we use a library for the routes called <strong>Reach Router</strong>, and here's the instruction about how to make the buttons active https://reach.tech/router/example/active-links.\r\n        </li>\r\n        <li>\r\n          We would like to remove the Homepage button from the navbar and make the Title clickable, which should take it to the homepage.\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exercise03;\r\n","import React from 'react';\r\nimport { Router, Link } from '@reach/router';\r\n\r\nimport Exercise01 from './exercises/Exercise01'\r\nimport Exercise02 from './exercises/Exercise02'\r\nimport Exercise03 from './exercises/Exercise03'\r\n\r\nimport './App.css';\r\n\r\nconst Welcome = () => {\r\n  return <div>\r\n    <h2>Welcome!</h2>\r\n    <p>\r\n      Please take a look at the 3 exercises, each of them contain instructions.\r\n    </p>\r\n  </div>\r\n}\r\n\r\nconst NavLink = props => (\r\n  <Link    \r\n    {...props}  // props contain NavLink's children and the prop \"to\".\r\n    getProps={({ isCurrent }) => {  // getProps is function with an object as a param. isCurrent will be true if the location.pathname is exactly the same as the anchor’s href.\r\n      return {\r\n        className: isCurrent ? \"nav-link active\" : \"nav-link\" // getProps will get such for an underlying anchor element.\r\n      };\r\n    }}\r\n  />\r\n  \r\n);\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Link to=\"/\">\r\n        <h1 className=\"py-4\">FrontEnd Interview Exercises</h1>\r\n      </Link>      \r\n\r\n      <ul className=\"nav nav-tabs\">\r\n        <li className=\"nav-item\">\r\n          <NavLink to=\"/exercise01\">Exercise 01</NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink to=\"/exercise02\">Exercise 02</NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink to=\"/exercise03\">Exercise 03</NavLink>        \r\n        </li>\r\n      </ul>\r\n\r\n      <Router className=\"mt-5 mb-5\">\r\n        <Welcome path=\"/\" default />\r\n        <Exercise01 path=\"/exercise01\" />\r\n        <Exercise02 path=\"/exercise02\" />\r\n        <Exercise03 path=\"/exercise03\" />\r\n      </Router>\r\n\r\n    </div>  \r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}